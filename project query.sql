CREATE TABLE ORDER_DETAILS (
	ORDER_DETAILS_ID INT8,
	ORDER_ID INT8,
	PIZZA_ID CHAR(20) NOT NULL,
	QUANTITY INT8
);

CREATE TABLE ORDERS (ORDER_ID INT8, DATE DATE, TIME TIME);

CREATE TABLE PIZZA_TYPES (
	PIZZA_TYPE_ID VARCHAR,
	NAME VARCHAR,
	CATEGORY VARCHAR,
	INGREDIENTS VARCHAR
);

CREATE TABLE PIZZAS (
	PIZZA_ID VARCHAR,
	PIZZA_TYPE_ID VARCHAR,
	SIZE VARCHAR,
	PRICE NUMERIC
);

-- copy order_details table
COPY ORDER_DETAILS
FROM
	'D:\Data Analyst\2. SQL\Projects\pizza-sales---SQL-main\pizza_sales\order_details.csv' DELIMITER ',' CSV HEADER;

-- copy orders table
COPY ORDERS
FROM
	'D:\Data Analyst\2. SQL\Projects\pizza-sales---SQL-main\pizza_sales\orders.csv' DELIMITER ',' CSV HEADER;

-- copy pizza_types table
COPY PIZZA_TYPES
FROM
	'D:\Data Analyst\2. SQL\Projects\pizza-sales---SQL-main\pizza_sales\pizza_types.csv' DELIMITER ',' CSV HEADER;

-- copy pizzas table
COPY PIZZAS
FROM
	'D:\Data Analyst\2. SQL\Projects\pizza-sales---SQL-main\pizza_sales\pizzas.csv' DELIMITER ',' CSV HEADER;

SELECT
	*
FROM
	ORDER_DETAILS;

SELECT
	*
FROM
	ORDERS;

SELECT
	*
FROM
	PIZZA_TYPES;

SELECT
	*
FROM
	PIZZAS;

--------------------------------------Basic:
-- 1.Retrieve the total number of orders placed.
SELECT
	COUNT(ORDER_ID) AS TOTAL_ORDERS
FROM
	ORDERS;

--Calculate the total revenue generated from pizza sales.
SELECT
	ROUND(SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE), 2)
FROM
	ORDER_DETAILS
	JOIN PIZZAS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID;

--Identify the highest-priced pizza.
SELECT
	PIZZA_ID,
	MAX(PRICE)
FROM
	PIZZAS
GROUP BY
	PIZZA_ID
ORDER BY
	MAX(PRICE) DESC
LIMIT
	1;

--Identify the most common pizza size ordered.
--SELECT * FROM PIZZAS
--SELECT* FROM ORDER_DETAILS
SELECT
	PIZZAS.SIZE,
	COUNT(ORDER_DETAILS.ORDER_ID) AS FREQ_SIZE
FROM
	ORDER_DETAILS
	JOIN PIZZAS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
GROUP BY
	PIZZAS.SIZE
ORDER BY
	FREQ_SIZE DESC
LIMIT
	1;

--List the top 5 most ordered pizza types along with their quantities.
SELECT
	PIZZA_TYPES.NAME,
	SUM(ORDER_DETAILS.QUANTITY) AS QUANTITY
FROM
	ORDER_DETAILS
	JOIN PIZZAS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
	JOIN PIZZA_TYPES ON PIZZAS.PIZZA_TYPE_ID = PIZZA_TYPES.PIZZA_TYPE_ID
GROUP BY
	PIZZA_TYPES.NAME
ORDER BY
	QUANTITY DESC
LIMIT
	5;

--							Intermediate:
--Join the necessary tables to find the total quantity of each pizza category ordered.
SELECT
	PIZZA_TYPES.CATEGORY,
	SUM(ORDER_DETAILS.QUANTITY) AS QUANTITY
FROM
	ORDER_DETAILS
	JOIN PIZZAS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
	JOIN PIZZA_TYPES ON PIZZAS.PIZZA_TYPE_ID = PIZZA_TYPES.PIZZA_TYPE_ID
GROUP BY
	PIZZA_TYPES.CATEGORY
ORDER BY
	QUANTITY DESC;

--Determine the distribution of orders by hour of the day.
SELECT EXTRACT(HOUR
FROM TIME) AS HOUR,
COUNT(ORDER_ID) AS ORDER_FREQ
FROM ORDERS
GROUP BY HOUR
ORDER BY HOUR;

--Join relevant tables to find the category-wise distribution of pizzas.
SELECT CATEGORY, COUNT(PIZZA_TYPE_ID) AS FREQ
FROM PIZZA_TYPES
GROUP BY CATEGORY
ORDER BY FREQ;

--Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT ORDERS.DATE AS DAY, SUM(ORDER_DETAILS.QUANTITY) AS ORDER
FROM ORDERS
JOIN ORDER_DETAILS ON ORDERS.ORDER_ID = ORDER_DETAILS.ORDER_ID
GROUP BY DAY
ORDER BY DAY;

SELECT ROUND(AVG(QUANTITY), 0) AS AVG_ORDER
FROM
(SELECT ORDERS.DATE AS DAY, SUM(ORDER_DETAILS.QUANTITY) AS QUANTITY
FROM ORDERS JOIN ORDER_DETAILS 
ON ORDERS.ORDER_ID = ORDER_DETAILS.ORDER_ID
GROUP BY DAY
ORDER BY DAY) AS ORDER_BY_DAY;

--Determine the top 3 most ordered pizza types based on revenue.
SELECT PIZZA_TYPES.NAME AS NAME,
SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) AS REVENUE
FROM
ORDER_DETAILS
JOIN PIZZAS 
ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
JOIN PIZZA_TYPES 
ON PIZZAS.PIZZA_TYPE_ID = PIZZA_TYPES.PIZZA_TYPE_ID
GROUP BY NAME
ORDER BY REVENUE DESC
LIMIT 3;

--								Advanced:
--Calculate the percentage contribution of each pizza type to total revenue.
SELECT PIZZA_TYPES.CATEGORY AS CAT, 
	ROUND((SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) 
	/ (SELECT ROUND(SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE), 2) 
	AS TOTAL_SALES
	FROM PIZZA_TYPES
	JOIN PIZZAS 
	ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
	JOIN ORDER_DETAILS 
	ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID)) * 100, 2) AS REV
FROM
	PIZZAS
	JOIN PIZZA_TYPES ON PIZZAS.PIZZA_TYPE_ID = PIZZA_TYPES.PIZZA_TYPE_ID
	JOIN ORDER_DETAILS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
	GROUP BY CAT
	ORDER BY REV DESC;

-- Analyze the cumulative revenue generated over time.
SELECT DATE, REV, SUM(REV) OVER (ORDER BY DATE) AS CUMSUM
FROM
(SELECT ORDERS.DATE AS DATE, 
SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) AS REV
FROM ORDER_DETAILS
JOIN ORDERS ON ORDERS.ORDER_ID = ORDER_DETAILS.ORDER_ID
JOIN PIZZAS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID
GROUP BY DATE
ORDER BY DATE) AS A;

--Determine the top 3 most ordered pizza types based on revenue for each pizza category.
SELECT CAT, NAME, REV, RN
FROM
(SELECT CAT, NAME, REV,
RANK() OVER (\PARTITION BY CAT ORDER BY REV DESC) AS RN
FROM
(SELECT PIZZA_TYPES.CATEGORY AS CAT, PIZZA_TYPES.NAME AS NAME,
SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) AS REV
FROM ORDER_DETAILS
JOIN PIZZAS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID
JOIN PIZZA_TYPES ON PIZZAS.PIZZA_TYPE_ID = PIZZA_TYPES.PIZZA_TYPE_ID
GROUP BY CAT, NAME
ORDER BY REV) AS A
) AS B
WHERE RN <= 3;